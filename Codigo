#VICTOR ALEJANDRO SALAZAR HERNANDEZ     19110352   7E
#PRACTICA 10

import mediapipe as mp
import cv2
import numpy as np
from PIL import image
import datetime

#Segmentacion de la imagen
mp_selfie_segmentacion = mp.solutions.selfie_segmentation

prueba = "superman.jpg"

#se lee la imagen
img = cv2.imread(prueba)

#reedimencionamos la imagen
alto, ancho = img.shape
img = cv2.resize(img,(int((ancho/7)),int((alto/7))))
print(img.shape)

tiempo = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
img_name = f"imagen procesada {tiempo}.png"
pre = "foto.png"

with mp_selfie_segmentation.selfiesegmentation(model_selection = 0) as selfie_segmentation:
        #convertimos la imagen de BGR a RGB antes del procesamiento
        img_rgb = cv2.cvtcolor(img, cv2.COLOR_BGR2RGB)

        #teniendo la imagen en RGB podemos aplicarle el metodo de selfie segmentation, lo que hace es buscar el contorno de la persona
        result = selfie_segmentation.process(img_rgb)

        #Binorizamos el resutado anterior para que solo haya 0 y 1 (blanco y negro)
        _, thresh = cv2.threshold(result.segmentation_mask, 0.75, 255, cv2.THRESH_BINARY)

        #imprimimos
        #print(thresh.dtype)
        #cambiamos float32 a uint8
        thresh = thresh.astype(np.uint8)
        #suavizamos la imagen
        thresh = cv2.medianBlur(thresh, 13)

        #invertimos el negro a blanco y el blanco a negro
        thresh_not = cv2.bitwise_not(thresh)

        # proceso para encontrar el contorno de la persona
        img_contours = cv2.findcontours(thresh_not, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[-2]
        img_contours = sorted(img_contours, key=cv2.cotourArea)

        for i in img_contours:
            if cv2.contourArea(i) > 100:
                break
        # fin del proceso para encontrar el contorno de una persona

        bg = cv2.imread("canal_alpha.png")
        bg = cv2.resized(bg, (int(ancho/7), int(alto/7)))

        fondo = cv2.bitwise_and(bg, bg, mask=thresh_not)

        fg = cv2.bitwise_and(img, img, mask=thresh)

        salida = cv2.add(fondo, fg)

        cv2.imwrite(pre, salida)

def procesar(image):
        img = Image.open(imagen)
        img = img.convert("RGBA")

        imgnp = np.array(img)

        white = np.sum(imgnp[:,:,:3], axis=2)
        white_mask = np.where(white == 255*3, 1, 0)

        alpha = np.where(white_mask, 0, imgnp[:,:,-1])

        imgnp[:,:,-1] = alpha

        img = Image.fromarray(np.uint8(imgnp))
        img.save(img_name, "PNG")
        print("completado!")


procesar(pre)

cv2.imshow("img", img)
cv2.imshow("result_mask", result.segmetation_mask)
cv2.imshow("threshold", thresh_not)
cv2.imshow("threshold not", thresh_not)
cv2.imshow("new_img", fondo)
cv2.imshow("fg", fg)
cv2.imshow("salida", salida)
